include.rownames = TRUE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
minIntensity <- -2
maxIntensity <- 15
plots <- vector("list")
for (i in 1:length(runs))
{
run <- runs[i]
intensities <- peptideData[[run]] %>% exprs %>% log2 %>% as.data.frame
plots[[run]] <- intensityDistributionPlot(
intensities,
groups,
groupColours,
title = run,
xlab=expression(log[2](intensity)),
minIntensity = minIntensity,
maxIntensity = maxIntensity,
showLegend = (i == 1))
}
do.call("grid.arrange", c(plots, ncol = 1))
peptideDataImputedMin <- list()
peptideDataImputedKNN <- list()
for (run in runs)
{
peptideDataImputedMin[[run]] <- impute(peptideData[[run]], "min")
peptideDataImputedKNN[[run]] <- impute(peptideData[[run]], "knn")
}
peptideDataNormalized <- list()
peptideDataNormalized[["IncludeMissingValues_NoNormalization"]] <- peptideData
peptideDataNormalized[["ExcludeMissingValues_NoNormalization"]] <- peptideDataExcludingMissingValues
peptideDataNormalized[["ImputeMin_NoNormalization"]] <- peptideDataImputedMin
peptideDataNormalized[["ImputeKNN_NoNormalization"]] <- peptideDataImputedKNN
for (missingValueMethod in c("IncludeMissingValues", "ExcludeMissingValues", "ImputeMin", "ImputeKNN"))
{
peptideDataForNormalization <- peptideDataNormalized[[paste(missingValueMethod, "NoNormalization", sep = "_")]]
quantileNormalizationAnalysis <- paste(missingValueMethod, "QuantileNormalization", sep = "_")
quantileNormalizationExcludingIgGAnalysis <-
paste(missingValueMethod, "QuantileNormalizationExcludingIgG", sep = "_")
scaleNormalizationAnalysis <- paste(missingValueMethod, "ScaleNormalization", sep = "_")
scaleNormalizationExcludingIgGAnalysis <-
paste(missingValueMethod, "ScaleNormalizationExcludingIgG", sep = "_")
scaleNormalizationTopIgGAnalysis <- paste(missingValueMethod, "ScaleNormalizationTopIgG", sep = "_")
peptideDataNormalized[[quantileNormalizationAnalysis]] <- list()
peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]] <- list()
peptideDataNormalized[[scaleNormalizationAnalysis]] <- list()
peptideDataNormalized[[scaleNormalizationExcludingIgGAnalysis]] <- list()
peptideDataNormalized[[scaleNormalizationTopIgGAnalysis]] <- list()
numberOfPeptidesWithHighestIgG <- 10
for (run in runs)
{
data <- peptideDataForNormalization[[run]]
# quantile normalization
peptideDataNormalized[[quantileNormalizationAnalysis]][[run]] <- normalize(data, method = "quantiles")
# scale normalization
peptideDataNormalized[[scaleNormalizationAnalysis]][[run]] <- normalizeMedianScaling(data)
samples <- setdiff(sampleNames(data), controlGroup)
# quantile normalization
normalized <- normalize(data[,samples], method = "quantiles")
peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]][[run]] <- data
exprs(peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]][[run]])[,samples] <-
exprs(normalized)
# scale normalization
peptideDataNormalized[[scaleNormalizationExcludingIgGAnalysis]][[run]] <-
normalizeMedianScaling(data, samples)
# scale normalization using peptides with highest IgG intensities for computing sample medians
controlIntensities <- data %>%
exprs %>%
as.data.frame %>%
select(one_of(controlGroup)) %>%
unlist %>%
as.numeric
controlIntensities[is.na(controlIntensities)] <- -Inf
controlIntensityOrder <- rev(order(controlIntensities))
peptideDataNormalized[[scaleNormalizationTopIgGAnalysis]][[run]] <-
normalizeMedianScaling(data, rowsForCalculatingMedian = controlIntensityOrder[1:numberOfPeptidesWithHighestIgG])
}
}
analysis <- "IncludeMissingValues_QuantileNormalization"
minIntensity <- 0
maxIntensity <- 15
plots <- vector("list")
for (i in 1:length(runs))
{
run <- runs[i]
intensities <- peptideDataNormalized[[analysis]][[run]] %>% exprs %>% log2 %>% as.data.frame
plots[[run]] <- intensityDistributionPlot(
intensities,
groups,
groupColours,
title = run,
xlab=expression(log[2](intensity)),
minIntensity = minIntensity,
maxIntensity = maxIntensity,
showLegend = (i == 1))
}
do.call("grid.arrange", c(plots, ncol = 1))
proteinData <- list()
for (analysis in names(peptideDataNormalized))
{
peptideDataForSummarization <- peptideDataNormalized[[analysis]]
proteinData[[analysis]] <- list()
for (run in runs)
{
data <- peptideDataForSummarization[[run]]
# exclude rows with missing values (will have no effect if imputation carried out)
data <- data[which(complete.cases(exprs(data))),]
data <- combineFeatures(data, groupBy = fData(data)$Protein, fun = "sum", na.rm = FALSE)
fData(data) <- fData(data) %>% select(Protein)
proteinData[[analysis]][[run]] <- data
}
}
combinedProteinData <- list()
for (analysis in names(proteinData))
{
for (run in runs)
{
data <- proteinData[[analysis]][[run]]
sampleNames(data) <- pData(data) %>%
transmute(Sample = paste(Run, Group, sep = ":")) %>%
unlist %>%
as.character
if (is.null(combinedProteinData[[analysis]]))
{
combinedProteinData[[analysis]] <- data
} else
{
combinedProteinData[[analysis]] <- BiocGenerics::combine(combinedProteinData[[analysis]], data)
}
}
}
isRepresented <- function(x) any(!is.na(x))
getReplicateCounts <- function(data)
{
metadata <- pData(data) %>% rownames_to_column("Sample")
intensities <- data %>%
exprs %>%
as.data.frame %>%
mutate(N = 0)
for (run in runs)
{
samples <- metadata %>%
filter(Run == run) %>%
select(Sample) %>%
unlist %>%
as.character
intensities <- intensities %>%
mutate(N = N + apply(select(., one_of(samples)), 1, isRepresented))
}
replicateCounts <- intensities %>%
select(N) %>%
mutate(Count = 0) %>%
group_by(N) %>%
summarize_each(funs(length)) %>%
ungroup %>%
mutate(N = as.character(N))
replicateCounts <- replicateCounts %>%
bind_rows(data_frame(N = "total", Count = sum(replicateCounts$Count)))
return(replicateCounts)
}
replicateCounts <- getReplicateCounts(combinedProteinData[["ImputeKNN_ScaleNormalization"]])
replicateCountTableData <- inner_join(
getReplicateCounts(combinedProteinData[["ImputeKNN_ScaleNormalization"]]) %>%
rename(`Including missing values` = Count),
getReplicateCounts(combinedProteinData[["ExcludeMissingValues_ScaleNormalization"]]) %>%
rename(`Excluding missing values` = Count),
by = "N"
)
replicateCountTableData <- replicateCountTableData %>%
as.data.frame %>%
column_to_rownames(var = "N") %>%
t %>%
as.data.frame %>%
rownames_to_column(var = "Runs/replicates")
# colnames(replicateCounts) <- c("Runs/replicates", "Proteins (includes missing values)", "Proteins")
print(
xtable(
replicateCountTableData,
# align = "llr",
caption = "Numbers of proteins identified in differing numbers of runs and total number of proteins identified in all runs."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
data <- combinedProteinData[["ImputeKNN_QuantileNormalization"]]
metadata <- pData(data) %>% rownames_to_column("Sample")
scaledIntensities <- data %>%
exprs %>%
as.data.frame %>%
filter(complete.cases(.))
for (run in runs)
{
samples <- metadata %>%
filter(Run == run) %>%
select(Sample) %>%
unlist %>%
as.character
summedIntensities <- scaledIntensities %>%
select(one_of(samples)) %>%
rowSums
scaledIntensities <- scaledIntensities %>%
mutate_each(funs(. / summedIntensities), one_of(samples))
}
print(pcaPlot(scaledIntensities, metadata$Sample, metadata$Group, groupColours, labels = metadata$Run, legend = TRUE))
significanceLevel <- 0.05
controlLogFoldChangeThreshold <- 1.0
contrastsTable <- read.delim("SampleData/contrasts.txt", check.names = FALSE)
contrastsToPrint <- contrastsTable$Contrast[contrastsTable$Print ==1]
factors <- c("Group", "Run")
model <- as.formula(paste(c("~ 0", factors), collapse = " + "))
fittedLinearModels <- list()
fittedLinearModelsExcludingControls <- list()
for (analysis in names(combinedProteinData))
{
cat(analysis, "\n", sep = "")
data <- combinedProteinData[[analysis]]
# log2 transform
exprs(data) <- log2(exprs(data))
design <- model.matrix(model, data = pData(data))
colnames(design) <- colnames(design) %>%
sub(pattern = "^Group", replacement = "") %>%
gsub(pattern = " ", replacement = "_")
fittedLinearModels[[analysis]] <- lmFit(data, design = design)
samples <- pData(data) %>%
rownames_to_column("Sample") %>%
filter(Group != controlGroup) %>%
select(Sample) %>%
unlist(use.names = FALSE)
data <- data[, sampleNames(data) %in% samples]
design <- model.matrix(model, data = pData(data))
colnames(design) <- colnames(design) %>%
sub(pattern = "^Group", replacement = "") %>%
gsub(pattern = " ", replacement = "_")
fittedLinearModelsExcludingControls[[analysis]] <- lmFit(data, design = design)
}
contrasts <- contrastsTable$Contrast
reformatGroup <- function(x) gsub(x, pattern = " ", replacement = "_")
reformatContrasts <- function(x)
{
x %>%
gsub(pattern = " ", replacement = "_") %>%
sub(pattern = "_-_", replacement = " - ") %>%
sub(pattern = "_vs_", replacement = " - ")
}
reformattedContrasts <- reformatContrasts(contrasts)
fittedContrasts <- list()
for (analysis in names(combinedProteinData))
{
cat(analysis, "\n", sep = "")
fittedLinearModel <- fittedLinearModels[[analysis]]
# fittedLinearModel <- fittedLinearModelsExcludingControls[[analysis]]
contrastMatrix <- makeContrasts(contrasts = reformattedContrasts, levels = fittedLinearModel$design)
fittedContrasts[[analysis]] <- contrasts.fit(fittedLinearModel, contrastMatrix)
fittedContrasts[[analysis]] <- eBayes(fittedContrasts[[analysis]], trend = TRUE, robust = TRUE)
}
createContrastResults <- function(
msnset,
fittedLinearModel,
fittedLinearModelExcludingControls,
fittedContrasts,
runs,
contrastGroups,
controlGroup,
proteinInfo)
{
reformattedContrast <- reformatContrasts(paste(contrastGroups, collapse = " - "))
reformattedContrastGroups <- reformattedContrast %>% strsplit(" - ") %>% unlist
reformatedControlGroup <- reformatGroup(controlGroup)
results <- topTable(fittedContrasts, coef = reformattedContrast, number = Inf, sort.by = "none")
fittedIntensities <- as.data.frame(fittedLinearModel$coefficients)
# fittedIntensities <- as.data.frame(fittedLinearModelExcludingControls$coefficients)
contrastFittedIntensities <- select(fittedIntensities, one_of(reformattedContrastGroups))
results$logFC <- contrastFittedIntensities[, 1] - contrastFittedIntensities[, 2]
fittedIntensities <- as.data.frame(fittedLinearModel$coefficients)
contrastFittedIntensities <- select(fittedIntensities, one_of(reformattedContrastGroups))
controlFittedIntensities <- fittedIntensities[, reformatedControlGroup]
results$logFCcontrol = apply(contrastFittedIntensities - controlFittedIntensities, 1, max)
samples <- pData(msnset) %>%
mutate(Sample = rownames(.)) %>%
filter(Group %in% c(contrastGroups, controlGroup)) %>%
select(Sample) %>%
unlist(use.names = FALSE)
intensities <- exprs(msnset) %>%
as.data.frame %>%
select(one_of(samples))
# add N column for the number of replicates, i.e. runs where intensity
# is not NA for both groups
n <- rep(0, nrow(intensities))
for (run in runs)
{
samples <- pData(msnset) %>%
mutate(Sample = rownames(.)) %>%
filter(Group %in% contrastGroups) %>%
filter(Run == run) %>%
select(Sample) %>%
unlist(use.names = FALSE)
n <- n +
intensities %>%
select(one_of(samples)) %>%
transmute(n = ifelse(complete.cases(.), 1, 0)) %>%
unlist(use.names = FALSE)
}
results <- results %>%
mutate(N = n) %>%
bind_cols(fittedIntensities %>% select(one_of(rev(reformattedContrastGroups), controlGroup))) %>%
bind_cols(intensities) %>%
left_join(proteinInfo, by = "Protein")
results <- bind_cols(
results %>% select(Protein, Gene, Description, N),
results %>% select(-Protein, -Gene, -Description, -N)
)
results
}
for (contrastName in contrastsToPrint) {
processingDescription <- "excluding peptides with missing intensities, quantile normalization"
analysis <- "ExcludeMissingValues_QuantileNormalization"
contrastGroups = strsplit(contrastName," vs ")
cat ("\n ##",contrastName, ",", processingDescription)
data <- combinedProteinData[[analysis]]
exprs(data) <- log2(exprs(data))
results <- createContrastResults(
data,
fittedLinearModels[[analysis]],
fittedLinearModelsExcludingControls[[analysis]],
fittedContrasts[[analysis]],
runs,
contrastGroups,
controlGroup,
proteinInfo)
}
knitr::opts_chunk$set(cache = TRUE)
library(tidyr)
library(dplyr)
library(tibble)
library(MSnbase)
library(RColorBrewer)
library(ggplot2)
library(kfigr)
library(gridExtra)
library(xtable)
library(limma)
source("Functions/plots.R")
source("Functions/normalization.R")
options(xtable.comment = FALSE)
options(xtable.booktabs = TRUE)
addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(0)
addtorow$command  <- c(paste("\\hline \n",
"\\endhead \n",
"\\hline \n",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",sep=""))
proteinInfo <- read.delim("ReferenceData/protein_gene_description.txt", stringsAsFactors = FALSE)
metadata <- read.delim("SampleData/metadata.txt", check.names = FALSE)
contrastsTable <- read.delim("SampleData/contrasts.txt", check.names = FALSE)
runs <- levels(metadata$Run)
groups <- levels(metadata$Group)
controlGroup <- "IgG"
groupColours <- c(brewer.pal(9, "Blues")[5:7], brewer.pal(9, "RdPu")[5:7], brewer.pal(9, "Greens")[6])
names(groupColours) <- groups
sampleColours <- groupColours[metadata$Group]
names(sampleColours) <- metadata$Sample
peptideData <- list()
for (run in runs)
{
cat(run, "\n", sep = "")
data <- read.delim(paste("ProcessedData/", run, ".txt", sep = ""), stringsAsFactors = FALSE, check.names = FALSE)
peptideCount <- data %>% select(Sequence, Modifications) %>% distinct %>% nrow
cat("Peptides:", peptideCount, "\n", sep = "")
if (peptideCount != nrow(data))
stop("Error: multiple rows for at least one peptide/modification (is this PSM-level data?)")
proteinCount <- data %>% select(Protein) %>% distinct %>% nrow
cat("Proteins:", proteinCount, "\n", sep = "")
sampleColumns <- metadata %>%
filter(Run == run) %>%
select(Group) %>%
unlist(use.names = FALSE) %>%
as.character
data <- MSnSet(
exprs = data %>% select(one_of(sampleColumns)) %>% as.matrix,
fData = data %>% select(Sequence, Modifications, Protein),
pData = metadata %>% filter(Run == run) %>% mutate(RowName = Group) %>% column_to_rownames("RowName")
)
peptideData[[run]] <- data
}
print(
xtable(
metadata %>% select(Run, Tag, Group) %>% spread(Run, Tag),
caption = "Isobaric tags used for each sample (group) and run."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
print(
xtable(
contrastsTable %>% select(Contrast) %>% spread(Contrast),
caption = "Configured Constrasts."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
contrastsTable
contrastsTable$Contrast
contrastsTable <- read.delim("SampleData/contrasts.txt", check.names = FALSE)
View(contrastsTable)
print(
xtable(
contrastsTable %>% select(Contrast) %>% spread(Contrast),
caption = "Configured Constrasts."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
print(
xtable(
metadata %>% select(Run, Tag, Group) %>% spread(Run, Tag),
caption = "Isobaric tags used for each sample (group) and run."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
print(
xtable(
contrastsTable %>% select(Contrast) %>% spread(Contrast),
caption = "Configured Constrasts."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
View(metadata)
View(contrastsTable)
run
Run
Tag
print(
xtable(
contrastsTable %>% select(Contrast),
caption = "Configured Constrasts."
),
include.rownames = FALSE,
size = "\\setlength{\\tabcolsep}{12pt}"
)
?knit2pdf
knit2pdf('05.QRIMESceneInvestigatonReport.Rmd', output = paste('report_', "CONTRAST", '.pdf', sep = ''))
library(knitr)
knit2pdf('05.QRIMESceneInvestigatonReport.Rmd', output = paste('report_', "CONTRAST", '.pdf', sep = ''))
library(knitr)
render('05.QRIMESceneInvestigatonReport.Rmd', output = paste('05.QRIMEReport_', "CONTRAST", '.pdf', sep = ''))
library("rmarkdown")
render('05.QRIMESceneInvestigatonReport.Rmd', output = paste('05.QRIMEReport_', "CONTRAST", '.pdf', sep = ''))
?render
library("rmarkdown")
render('05.QRIMESceneInvestigatonReport.Rmd', output_file = paste('05.QRIMEReport_', "CONTRAST", '.pdf', sep = ''))
strsplit(contrast, " vs ")
contrast <- "ER 45min vs ER 0min"
strsplit(contrast, " vs ")
c("ER 45min", "ER 0min")
strsplit(contrast, " vs ")[1]
strsplit(contrast, " vs ")[,1]
strsplit(contrast, " vs ")[1,]
strsplit(contrast, " vs ")[1
]
as.vector(strsplit(contrast, " vs "))
as.matrix(strsplit(contrast, " vs "))
as.character(strsplit(contrast, " vs "))
as.character(strsplit(contrast, " vs "))
?strsplit2
strsplit2(contrast, " vs ")[1
]
strsplit2(contrast, " vs ")
strsplit2(contrast, " vs ")[1]
strsplit2(contrast, " vs ")[,1]
strsplit2(contrast, " vs ")[,2]
strsplit2(contrast, " vs ")[1,2]
strsplit2(contrast, " vs ")
strsplit2(contrast, " vs ")[1,]
contrastsTable <- read.delim("SampleData/contrasts.txt", check.names = FALSE)
View(contrastsTable)
contrastsTable
contrastsTable$Contrast
contrastsTable$Contrast[contrastsTable$Report==Y]
contrastsTable$Contrast[contrastsTable$Report=="Y]
_
""
"
contrastsTable$Contrast[contrastsTable$Report=="Y"]
?for
?
for?
library("rmarkdown")
for (contrast in contrastsTable$Contrast[contrastsTable$Report=="Y"])
{
render('05.QRIMESceneInvestigatonReport.Rmd', output_file = paste('Reports/05.QRIMEReport_', contrast, '.pdf', sep = ''))
}
library("rmarkdown")
for (contrast in contrastsTable$Contrast[contrastsTable$Report=="Y"])
{
print(Test)
}
library("rmarkdown")
for (contrast in contrastsTable$Contrast[contrastsTable$Report=="Y"])
{
print("Test"")
}
library("rmarkdown")
for (contrast in contrastsTable$Contrast[contrastsTable$Report=="Y"])
{
print("Test")
}
unlink('04.QRIMESceneInvestigatonOverview_cache', recursive = TRUE)
