{
    "collab_server" : "",
    "contents" : "---\ntitle: \"QRIME Scene Investigator\"\nauthor: \"Andrew Holding & Matt Eldridge\"\ndate: \"9 January 2017\"\noutput:\n  pdf_document:\n    number_sections: yes\n    toc: yes\n    fig_caption: yes\nheader-includes:\n  - \\usepackage{longtable}\n  - \\usepackage{booktabs}\n---\n\n****************************\n\n```{r configuration, include = FALSE, cache = FALSE}\nknitr::opts_chunk$set(cache = TRUE)\n```\n\n```{r load_libraries, include = FALSE, cache = FALSE}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(MSnbase)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\nlibrary(kfigr)\nlibrary(gridExtra)\nlibrary(xtable)\nlibrary(limma)\n```\n\n```{r load_functions, include = FALSE, cache = FALSE}\nsource(\"plots.R\")\nsource(\"normalization.R\")\n```\n\n```{r xtable_options, include=FALSE, cache = FALSE}\n\noptions(xtable.comment = FALSE)\noptions(xtable.booktabs = TRUE)\n\naddtorow          <- list()\naddtorow$pos      <- list()\naddtorow$pos[[1]] <- c(0)\naddtorow$command  <- c(paste(\"\\\\hline \\n\",\n                             \"\\\\endhead \\n\",\n                             \"\\\\hline \\n\",\n                             \"{\\\\footnotesize Continued on next page} \\n\",\n                             \"\\\\endfoot \\n\",\n                             \"\\\\endlastfoot \\n\",sep=\"\"))\n```\n\n```{r read_protein_information, include = FALSE}\nproteinInfo <- read.delim(\"protein_gene_description.txt\", stringsAsFactors = FALSE)\n```\n\n```{r read_metadata, include = FALSE}\nmetadata <- read.delim(\"metadata.txt\", check.names = FALSE)\nruns <- levels(metadata$Run)\ngroups <- levels(metadata$Group)\ncontrolGroup <- \"IgG\"\n```\n\n```{r colours, include = FALSE}\ngroupColours <- c(brewer.pal(9, \"Blues\")[5:7], brewer.pal(9, \"RdPu\")[5:7], brewer.pal(9, \"Greens\")[6])\nnames(groupColours) <- groups\nsampleColours <- groupColours[metadata$Group]\nnames(sampleColours) <- metadata$Sample\n```\n\n```{r read_intensities, include = FALSE}\n\npeptideData <- list()\n\nfor (run in runs)\n{\n  cat(run, \"\\n\", sep = \"\")\n\n  data <- read.delim(paste(run, \"txt\", sep = \".\"), stringsAsFactors = FALSE, check.names = FALSE)\n\n  peptideCount <- data %>% select(Sequence, Modifications) %>% distinct %>% nrow\n  cat(\"Peptides:\", peptideCount, \"\\n\", sep = \"\")\n  if (peptideCount != nrow(data))\n    stop(\"Error: multiple rows for at least one peptide/modification (is this PSM-level data?)\")\n\n  proteinCount <- data %>% select(Protein) %>% distinct %>% nrow\n  cat(\"Proteins:\", proteinCount, \"\\n\", sep = \"\")\n\n  sampleColumns <- metadata %>%\n    filter(Run == run) %>%\n    select(Group) %>%\n    unlist(use.names = FALSE) %>%\n    as.character\n\n  data <- MSnSet(\n    exprs = data %>% select(one_of(sampleColumns)) %>% as.matrix,\n    fData = data %>% select(Sequence, Modifications, Protein),\n    pData = metadata %>% filter(Run == run) %>% mutate(RowName = Group) %>% column_to_rownames(\"RowName\")\n  )\n\n  peptideData[[run]] <- data\n}\n```\n\n\n# Introduction\n\nThis report is from an analysis of the RIME-TMT proteomics data for an experiment carried out by Andrew Holding to quantify specific interactors of estrogen receptor (ER) and forkhead box protein A1 (FOXA1) in MCF-7 cells.\n\nThe RIME (Rapid Immunoprecipitation of Endogenous Proteins) technique was used to pull down ER and FOXA1 and their interacting proteins, which were subsequently assessed and quantitated using mass spectrometry with tandem mass tags (TMT). TMT runs were carried out for 3 biological replicates, estrogen-starved MCF-7 cells from the same cell line at different times/passages, before and after addition of estrogen with samples taken at 3 different time points -- 0, 45 and 90 minutes after estrogen addition. A pull down of Immunoglobulin G (IgG) was also run as a control.\n\nThe digests from two of the biological replicates (PR622 and PR650) were analyzed with 3 separate runs of the mass spectrometer to increase coverage; data from the repeated runs were combined prior to the analysis carried out here. The other sample (PR590) was run once only.\n\n`r figr(\"samples_table\", TRUE, type=\"Table\")` shows the isobaric tags used for each sample within each of the runs.\n\n```{r samples_table, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\nprint(\n  xtable(\n    metadata %>% select(Run, Tag, Group) %>% spread(Run, Tag),\n    caption = \"Isobaric tags used for each sample (group) and run.\"\n  ),\n  include.rownames = FALSE,\n  size = \"\\\\setlength{\\\\tabcolsep}{12pt}\"\n)\n```\n\n\n# Peptide intensity data\n\nRaw spectra were processed using Proteome Discover 2.1 to produce peptide-level intensity data with a single set of intensity values per distinct peptide. Only peptides with unique high-confidence protein matches were included.\n\nMultiple peptide-spectrum matches (PSMs) for the same peptide were combined using Proteome Discoverer by summing the PSM-level intensities. Peptide sequences with different modifications are treated as distinct peptides and the data provided contain intensities values for each modification identified for a peptide sequence. Several distinct peptide sequences (with modifications) may have been identified for any given protein.\n\n`r figr(\"peptide_protein_count_table\", TRUE, type=\"Table\")` shows the numbers of distinct peptides and proteins obtained in each TMT run. Also given are the numbers of peptides and proteins after filtering peptides with missing intensity values in one or more TMT channels.\n\n```{r filter_missing_intensities, include=FALSE}\npeptideDataExcludingMissingValues <- list()\nfor (run in runs)\n{\n  cat(run, \"\\n\", sep = \"\")\n  data <- peptideData[[run]]\n  data <- data[which(complete.cases(exprs(data))),]\n  peptideDataExcludingMissingValues[[run]] <- data\n}\n```\n\n```{r combine_peptide_intensities, include = FALSE}\n\n# function for combining data for runs into single MSnSet object\ncombineRuns <- function(runData, runs)\n{\n  combinedData <- NULL\n\n  for (run in runs)\n  {\n    data <- runData[[run]]\n\n    sampleNames(data) <- pData(data) %>%\n      transmute(Sample = paste(Run, Group, sep = \":\")) %>%\n      unlist %>%\n      as.character\n\n    featureNames(data) <- fData(data) %>%\n      transmute(ID = paste(Sequence, Modifications, sep = \"|\")) %>%\n      unlist %>%\n      as.character()\n\n    if (is.null(combinedData))\n    {\n      combinedData <- data\n    } else\n    {\n      combinedData <- BiocGenerics::combine(combinedData, data)\n    }\n  }\n\n  return(combinedData)\n}\n\ncombinedPeptideData <- combineRuns(peptideData, runs)\ncombinedPeptideDataExcludingMissingValues <- combineRuns(peptideDataExcludingMissingValues, runs)\n```\n\n```{r peptide_protein_count_table, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ncountProteins <- function(data) data %>% fData %>% select(Protein) %>% distinct %>% nrow\n\npeptideData[[\"All\"]] <- combinedPeptideData\npeptideDataExcludingMissingValues[[\"All\"]] <- combinedPeptideDataExcludingMissingValues\n\ncounts <- bind_rows(\n  peptideData %>% sapply(nrow) %>% t %>% as.data.frame %>% mutate(label = \"Peptides\"),\n  peptideDataExcludingMissingValues %>% sapply(nrow) %>% t %>% as.data.frame %>% mutate(label = \"Peptides with no missing values\"),\n  peptideData %>% sapply(countProteins) %>% t %>% as.data.frame %>% mutate(label = \"Proteins\"),\n  peptideDataExcludingMissingValues %>% sapply(countProteins) %>% t %>% as.data.frame %>% mutate(label = \"Proteins with no missing values\")\n)\nrownames(counts) <- counts$label\ncounts <- counts %>% select(-label)\n\npeptideData[[\"All\"]] <- NULL\npeptideDataExcludingMissingValues[[\"All\"]] <- NULL\n\nprint(\n  xtable(\n    counts,\n    align = \"lrrrr\",\n    caption = \"Numbers of peptides and proteins observed in each run.\"\n  ),\n  include.rownames = TRUE,\n  size = \"\\\\setlength{\\\\tabcolsep}{12pt}\"\n)\n```\n\n`r figr(\"intensity_plots\", TRUE, type=\"Figure\")` shows the distribution of intensities for each sample within each run.\n\n```{r intensity_plots, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Density plots of intensities from each run.\", fig.height=8, fig.width=5}\n\nminIntensity <- -2\nmaxIntensity <- 15\n\nplots <- vector(\"list\")\n\nfor (i in 1:length(runs))\n{\n  run <- runs[i]\n  intensities <- peptideData[[run]] %>% exprs %>% log2 %>% as.data.frame\n  plots[[run]] <- intensityDistributionPlot(\n    intensities,\n    groups,\n    groupColours,\n    title = run,\n    xlab=expression(log[2](intensity)),\n    minIntensity = minIntensity,\n    maxIntensity = maxIntensity,\n    showLegend = (i == 1))\n}\n\ndo.call(\"grid.arrange\", c(plots, ncol = 1))\n```\n\n\n## Missing intensity values\n\nMissing intensity values can result even though ions are present at detectable concentrations due to the stochastic nature of the mass spectrometry acquisition method. It is reasonable to expect that these missing values are randomly distributed in the data. Alternatively, missing values may occur when there is a low abundance of ions, below the limit of detection of the instrument. These biologically relevant missing values are not randomly distributed, affecting only those proteins that are expressed at low levels in the samples analysed. The R/Bioconductor package `MSnBase` provides imputation methods for both types of missing value.\n\nIn this analysis, missing values have been handled in 3 different ways. The first approach is to exclude all peptide-level mesasurements where there is a missing value for one or more of the samples within a run. In addition, two imputation methods have been performed: one in which the missing values are set to the smallest non-missing value in the data for that run and the other in which k-nearest neighbour (KNN) averaging is applied.\n\n```{r imputation, include = FALSE}\npeptideDataImputedMin <- list()\npeptideDataImputedKNN <- list()\nfor (run in runs)\n{\n  peptideDataImputedMin[[run]] <- impute(peptideData[[run]], \"min\")\n  peptideDataImputedKNN[[run]] <- impute(peptideData[[run]], \"knn\")\n}\n```\n\n`r figr(\"intensity_plots_impute_min\", TRUE, type=\"Figure\")` shows the distribution of intensities for each sample within each run following imputation using the smallest non-missing values. A small hump just below zero on the log~2~ scale is clearly visible for each run.\n\n```{r intensity_plots_impute_min, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Density plots of intensities from each run following imputation of missing values using the smallest non-missing value in the data for each run.\", fig.height=8, fig.width=5}\n\nminIntensity <- -2\nmaxIntensity <- 15\n\nplots <- vector(\"list\")\n\nfor (i in 1:length(runs))\n{\n  run <- runs[i]\n  intensities <- peptideDataImputedMin[[run]] %>% exprs %>% log2 %>% as.data.frame\n  plots[[run]] <- intensityDistributionPlot(\n    intensities,\n    groups,\n    groupColours,\n    title = run,\n    xlab=expression(log[2](intensity)),\n    minIntensity = minIntensity,\n    maxIntensity = maxIntensity,\n    showLegend = (i == 1))\n}\n\ndo.call(\"grid.arrange\", c(plots, ncol = 1))\n```\n\n\n# Normalization of intensity data\n\nThe intensity distribution for PR622 suggests that the labeled samples have been pooled with differing protein concentrations and that some normalization is required to properly assess differences between groups. Normalization techniques that are commonly applied to microarray expression data and mRNA sequencing data assume that only a few genes, e.g. a few hundred out of tens of thousands, are expressed at very different levels between samples. This assumption may not hold for a RIME experiment where a specific set of interacting proteins is targeted. For example, if the majority of interacting proteins were to bind less strongly at one time point relative to another, quantile normalization or scale normalization approaches would have the effect of removing the general trend. In this case, following normalization, those proteins that bind less strongly may appear to be largely unchanged, while proteins with very similar levels of binding at the different time points would have artificially increased expression levels. Therefore some care is required when interpreting the results of a differential expression analysis for RIME TMT experiments.\n\nIn this analysis, quantile normalization and scale normalization were applied for each run separately.\n\nThe IgG control was used to assess non-specific binding. The binding of a protein was considered to be non-specific if the expression level of that protein in the condition of interest, e.g. ER at 45 minutes, was not significantly above the level observed for the IgG control. Proteins detected with the IgG control are expressed at lower levels in the PR590 and PR650 runs. Normalization of the IgG control along with the other samples would make it more difficult to distinguish between specific and non-specific binding since the intensities of the IgG control would be scaled to a similar level of those of the other samples.\n\nAmong a number of normalization approaches tested here, normalizations were carried out that both include and exclude the IgG control. `r figr(\"normalized_intensity_plots\", TRUE, type=\"Figure\")` shows the normalized intensity distributions following scale normalization of all peptide intensities including those with missing values. `r figr(\"normalizedExcludingIgG_intensity_plots\", TRUE, type=\"Figure\")` shows the normalized intensity distributions following scale normalization for all samples except the IgG controls.\n\n```{r normalization, include = FALSE}\n\npeptideDataNormalized <- list()\n\npeptideDataNormalized[[\"IncludeMissingValues_NoNormalization\"]] <- peptideData\npeptideDataNormalized[[\"ExcludeMissingValues_NoNormalization\"]] <- peptideDataExcludingMissingValues\npeptideDataNormalized[[\"ImputeMin_NoNormalization\"]] <- peptideDataImputedMin\npeptideDataNormalized[[\"ImputeKNN_NoNormalization\"]] <- peptideDataImputedKNN\n\nfor (missingValueMethod in c(\"IncludeMissingValues\", \"ExcludeMissingValues\", \"ImputeMin\", \"ImputeKNN\"))\n{\n  peptideDataForNormalization <- peptideDataNormalized[[paste(missingValueMethod, \"NoNormalization\", sep = \"_\")]]\n\n  quantileNormalizationAnalysis <- paste(missingValueMethod, \"QuantileNormalization\", sep = \"_\")\n  quantileNormalizationExcludingIgGAnalysis <-\n    paste(missingValueMethod, \"QuantileNormalizationExcludingIgG\", sep = \"_\")\n  scaleNormalizationAnalysis <- paste(missingValueMethod, \"ScaleNormalization\", sep = \"_\")\n  scaleNormalizationExcludingIgGAnalysis <-\n    paste(missingValueMethod, \"ScaleNormalizationExcludingIgG\", sep = \"_\")\n  scaleNormalizationTopIgGAnalysis <- paste(missingValueMethod, \"ScaleNormalizationTopIgG\", sep = \"_\")\n\n  peptideDataNormalized[[quantileNormalizationAnalysis]] <- list()\n  peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]] <- list()\n  peptideDataNormalized[[scaleNormalizationAnalysis]] <- list()\n  peptideDataNormalized[[scaleNormalizationExcludingIgGAnalysis]] <- list()\n  peptideDataNormalized[[scaleNormalizationTopIgGAnalysis]] <- list()\n\n  numberOfPeptidesWithHighestIgG <- 10\n\n  for (run in runs)\n  {\n    data <- peptideDataForNormalization[[run]]\n\n    # quantile normalization\n    peptideDataNormalized[[quantileNormalizationAnalysis]][[run]] <- normalize(data, method = \"quantiles\")\n    \n    # scale normalization\n    peptideDataNormalized[[scaleNormalizationAnalysis]][[run]] <- normalizeMedianScaling(data)\n\n    samples <- setdiff(sampleNames(data), controlGroup)\n\n    # quantile normalization\n    normalized <- normalize(data[,samples], method = \"quantiles\")\n    peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]][[run]] <- data\n    exprs(peptideDataNormalized[[quantileNormalizationExcludingIgGAnalysis]][[run]])[,samples] <-\n      exprs(normalized)\n\n    # scale normalization\n    peptideDataNormalized[[scaleNormalizationExcludingIgGAnalysis]][[run]] <-\n      normalizeMedianScaling(data, samples)\n\n    # scale normalization using peptides with highest IgG intensities for computing sample medians\n    controlIntensities <- data %>%\n      exprs %>%\n      as.data.frame %>%\n      select(one_of(controlGroup)) %>%\n      unlist %>%\n      as.numeric\n    controlIntensities[is.na(controlIntensities)] <- -Inf\n    controlIntensityOrder <- rev(order(controlIntensities))\n    peptideDataNormalized[[scaleNormalizationTopIgGAnalysis]][[run]] <-\n      normalizeMedianScaling(data, rowsForCalculatingMedian = controlIntensityOrder[1:numberOfPeptidesWithHighestIgG])\n  }\n}\n```\n\n```{r normalized_intensity_plots, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Density plots of normalized intensities from each TMT run where scale normalization was applied to peptide intensities that include misssing values.\", fig.height=8, fig.width=5}\n\nanalysis <- \"IncludeMissingValues_ScaleNormalization\"\n\nminIntensity <- 0\nmaxIntensity <- 15\n\nplots <- vector(\"list\")\n\nfor (i in 1:length(runs))\n{\n  run <- runs[i]\n  intensities <- peptideDataNormalized[[analysis]][[run]] %>% exprs %>% log2 %>% as.data.frame\n  plots[[run]] <- intensityDistributionPlot(\n    intensities,\n    groups,\n    groupColours,\n    title = run,\n    xlab=expression(log[2](intensity)),\n    minIntensity = minIntensity,\n    maxIntensity = maxIntensity,\n    showLegend = (i == 1))\n}\n\ndo.call(\"grid.arrange\", c(plots, ncol = 1))\n```\n\n```{r normalizedExcludingIgG_intensity_plots, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Density plots of normalized intensities from each TMT run where scale normalization was applied to peptide intensities for all samples except the IgG controls.\", fig.height=8, fig.width=5}\n\nanalysis <- \"IncludeMissingValues_ScaleNormalizationExcludingIgG\"\n\nminIntensity <- 0\nmaxIntensity <- 15\n\nplots <- vector(\"list\")\n\nfor (i in 1:length(runs))\n{\n  run <- runs[i]\n  intensities <- peptideDataNormalized[[analysis]][[run]] %>% exprs %>% log2 %>% as.data.frame\n  plots[[run]] <- intensityDistributionPlot(\n    intensities,\n    groups,\n    groupColours,\n    title = run,\n    xlab=expression(log[2](intensity)),\n    minIntensity = minIntensity,\n    maxIntensity = maxIntensity,\n    showLegend = (i == 1))\n}\n\ndo.call(\"grid.arrange\", c(plots, ncol = 1))\n```\n\nA further normalization approach was attempted that scales the data from all samples within a run based on a subset of peptides that are considered most likely to be at similar concentrations between the samples. The assumption is that the peptides with the highest intensity values in the IgG control are the result of non-specific binding and that that binding is consistent across all samples. Similar to the scale normalization applied in the first approach, the median intensity within each sample is computed to determine a scaling factor for each sample within a run but the median computed only uses the `r numberOfPeptidesWithHighestIgG` peptides with the highest IgG measurements. As before, normalization is carried out within each run separately.\n\n`r figr(\"normalizedIgG_intensity_plots\", TRUE, type=\"Figure\")` shows the resulting normalized intensity distributions. Strikingly, the IgG intensity distribution is shifted to lower values in run PR622, making it more consistent with the other 2 runs.\n\n\n```{r normalizedIgG_intensity_plots, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Density plots of normalized intensities from each TMT run where scale normalization is applied based on\", numberOfPeptidesWithHighestIgG, \"peptides with the highest IgG intensities in each run.\"), fig.height=8, fig.width=5}\n\nanalysis <- \"IncludeMissingValues_ScaleNormalizationTopIgG\"\n\nminIntensity <- 0\nmaxIntensity <- 15\n\nplots <- vector(\"list\")\n\nfor (i in 1:length(runs))\n{\n  run <- runs[i]\n  intensities <- peptideDataNormalized[[analysis]][[run]] %>% exprs %>% log2 %>% as.data.frame\n  plots[[run]] <- intensityDistributionPlot(\n    intensities,\n    groups,\n    groupColours,\n    title = run,\n    xlab=expression(log[2](intensity)),\n    minIntensity = minIntensity,\n    maxIntensity = maxIntensity,\n    showLegend = (i == 1))\n}\n\ndo.call(\"grid.arrange\", c(plots, ncol = 1))\n```\n\n\n# Protein-level quantification\n\nProtein-level quantification was carried out for each run separately by summing normalized intensity values for all peptides matching to a particular protein. This is similar in principle to the gene-level quantification that is carried out during microarray analysis or the read-counting approach in RNA-Seq. Essentially, all signal attributable to a particular protein is assigned to that protein. Intensity values vary in magnitude depending on the elution profile for the peptide and when the peptide is sampled. Relative intensities for a peptide between the tags or samples within a run should be consistent but the signal may include some contribution from a contaminating, co-eluting peptide, the extent of which may differ for different PSMs. In summing intensities from multiple measurements for the same peptide, those peptides that have higher levels of intensity values will have a greater weight in determining the overall intensity; higher intensity measurements are likely to more accurately reflect differences between samples so this may be advantageous.\n\nWhen no imputation of missing values was carried out, peptides with missing values in one or more samples were excluded from the summation. Missing values that arise for technical reasons instead of being at undetectable levels in a sample would otherwise reduce the overall intensity in that sample relative to other samples.\n\n```{r summarize_protein_intensities, include=FALSE}\n\nproteinData <- list()\n\nfor (analysis in names(peptideDataNormalized))\n{\n  peptideDataForSummarization <- peptideDataNormalized[[analysis]]\n\n  proteinData[[analysis]] <- list()\n\n  for (run in runs)\n  {\n    data <- peptideDataForSummarization[[run]]\n\n    # exclude rows with missing values (will have no effect if imputation carried out)\n    data <- data[which(complete.cases(exprs(data))),]\n\n    data <- combineFeatures(data, groupBy = fData(data)$Protein, fun = \"sum\", na.rm = FALSE)\n    fData(data) <- fData(data) %>% select(Protein)\n\n    proteinData[[analysis]][[run]] <- data\n  }\n}\n```\n\n```{r combine_protein_intensities, include = FALSE}\n\ncombinedProteinData <- list()\n\nfor (analysis in names(proteinData))\n{\n  for (run in runs)\n  {\n    data <- proteinData[[analysis]][[run]]\n\n    sampleNames(data) <- pData(data) %>%\n      transmute(Sample = paste(Run, Group, sep = \":\")) %>%\n      unlist %>%\n      as.character\n\n    if (is.null(combinedProteinData[[analysis]]))\n    {\n      combinedProteinData[[analysis]] <- data\n    } else\n    {\n      combinedProteinData[[analysis]] <- BiocGenerics::combine(combinedProteinData[[analysis]], data)\n    }\n  }\n}\n```\n\n```{r replicate_counts, include=FALSE}\n\nisRepresented <- function(x) any(!is.na(x))\n\ngetReplicateCounts <- function(data)\n{\n  metadata <- pData(data) %>% rownames_to_column(\"Sample\")\n\n  intensities <- data %>%\n    exprs %>%\n    as.data.frame %>%\n    mutate(N = 0)\n\n  for (run in runs)\n  {\n    samples <- metadata %>%\n      filter(Run == run) %>%\n      select(Sample) %>%\n      unlist %>%\n      as.character\n\n    intensities <- intensities %>%\n      mutate(N = N + apply(select(., one_of(samples)), 1, isRepresented))\n  }\n\n  replicateCounts <- intensities %>%\n    select(N) %>%\n    mutate(Count = 0) %>%\n    group_by(N) %>%\n    summarize_each(funs(length)) %>%\n    ungroup %>%\n    mutate(N = as.character(N))\n\n  replicateCounts <- replicateCounts %>%\n    bind_rows(data_frame(N = \"total\", Count = sum(replicateCounts$Count)))\n\n  return(replicateCounts)\n}\n\nreplicateCounts <- getReplicateCounts(combinedProteinData[[\"ImputeKNN_ScaleNormalization\"]])\n\nreplicateCountTableData <- inner_join(\n  getReplicateCounts(combinedProteinData[[\"ImputeKNN_ScaleNormalization\"]]) %>%\n    rename(`Including missing values` = Count),\n  getReplicateCounts(combinedProteinData[[\"ExcludeMissingValues_ScaleNormalization\"]]) %>%\n    rename(`Excluding missing values` = Count),\n  by = \"N\"\n)\n\nreplicateCountTableData <- replicateCountTableData %>%\n  as.data.frame %>%\n  column_to_rownames(var = \"N\") %>%\n  t %>%\n  as.data.frame %>%\n  rownames_to_column(var = \"Runs/replicates\")\n```\n\nThe statistical analysis of differential expression between groups that follows requires at least 3 observations per group. `r figr(\"replicate_count_table\", TRUE, type=\"Table\")` gives the number of protein identified in just a single run, two runs or all three runs. A total of `r (replicateCounts %>% filter(N == \"all\"))$Count` proteins were identified across all runs of which `r (replicateCounts %>% filter(N == \"3\"))$Count` were observed in all three runs, allowing for a statistical analysis. log~2~ fold changes are still computed for proteins identified only in one or two of the runs, but no measure of the statistical significance is given in the differential expression analysis.\n\n```{r replicate_count_table, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n# colnames(replicateCounts) <- c(\"Runs/replicates\", \"Proteins (includes missing values)\", \"Proteins\")\nprint(\n  xtable(\n    replicateCountTableData,\n    # align = \"llr\",\n    caption = \"Numbers of proteins identified in differing numbers of runs and total number of proteins identified in all runs.\"\n  ),\n  include.rownames = FALSE,\n  size = \"\\\\setlength{\\\\tabcolsep}{12pt}\"\n)\n```\n\n\n# Principal Component Analysis\n\nProtein-level intensities were scaled to sum to 1.0 for each protein within a run, allowing for comparison across runs in a principal component analysis (PCA).\n\n`r figr(\"pca_plot\", TRUE, type=\"Figure\")` shows a PCA plot for the first two principal components using all proteins that were sampled in all three runs. The plot shows a clear separation of the ER, FOXA1 and IgG control pull-downs. The 0, 45 and 90 minute timepoints within each of the ER and FOXA1 groups are not completely separated in the first two principal components. `r figr(\"pca_plot_er\", TRUE, type=\"Figure\")` shows the PCA plot for just the ER samples.\n\n```{r pca_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Principal Componenent Analysis for proteins sampled in all 3 runs. The PCA was based on protein-level data resulting from summation of quantile normalized peptide intensities in which missing values were imputed using KNN-based nearest neighbour averaging. The first two principal components are displayed.\", fig.height=5}\n\ndata <- combinedProteinData[[\"ImputeKNN_QuantileNormalization\"]]\n\nmetadata <- pData(data) %>% rownames_to_column(\"Sample\")\n\nscaledIntensities <- data %>%\n  exprs %>%\n  as.data.frame %>%\n  filter(complete.cases(.))\n\nfor (run in runs)\n{\n  samples <- metadata %>%\n    filter(Run == run) %>%\n    select(Sample) %>%\n    unlist %>%\n    as.character\n\n  summedIntensities <- scaledIntensities %>%\n    select(one_of(samples)) %>%\n    rowSums\n\n  scaledIntensities <- scaledIntensities %>%\n    mutate_each(funs(. / summedIntensities), one_of(samples))\n}\n\nprint(pcaPlot(scaledIntensities, metadata$Sample, metadata$Group, groupColours, labels = metadata$Run, legend = TRUE))\n```\n\n```{r pca_plot_er, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Principal Componenent Analysis for ER-interactng proteins sampled in all 3 runs. The first two principal components are displayed.\", fig.height=5}\n\nmetadata <- metadata %>% filter(grepl(\"^ER\", Group))\n\nprint(pcaPlot(scaledIntensities, metadata$Sample, metadata$Group, groupColours, labels = metadata$Run, legend = TRUE))\n```\n\n\n# Differential Expression\n\n```{r differential_expression_paramters, include=FALSE}\nsignificanceLevel <- 0.05\ncontrolLogFoldChangeThreshold <- 1.0\n```\n\nA statistical analysis of differentially-expressed peptides was carried out using **limma**, a R/Bioconductor package commonly used in the analysis of microarray and RNA-seq data, but applicable to data from any quantitative expression technology.\n\nLimma uses linear models to assess differential expression in the context of multifactor experimental designs. It is able to analyze comparisons between many RNA targets simultaneously (or in this case many proteins) and has features that make these analyses stable even for experiments with small numbers of samples; this is achieved by borrowing information across genes (proteins).\n\nIn this analysis, limma was used to estimate log~2~ fold changes and standard errors by fitting a linear model for each protein where the model includes variables for the group (the ER and FOXA1 pull-downs at 0, 45 and 90 minute time points and the IgG control at 45 minutes) and the run. This is essentially a two-way ANOVA, a generalization of a paired analysis, in which comparisons between pull-downs at different time points are made within each run.\n\nLimma employs an empirical Bayes method to moderate the standard errors of the estimated log~2~ fold changes; this results in more stable inference and improved power, especially for experiments with small numbers of replicates.\n\nMultiple testing correction of p-values was applied using the Benjamini-Hochberg method to control the false discovery rate (FDR). The adjusted p-value (also known as a q-value) can be understood as follows. If all proteins with q-value below a threshold of `r significanceLevel` are selected as differentially expressed, then the expected proportion of false discoveries in the selected group is controlled to be less than the threshold value, in this case 5%.\n\nThe B-statistic (lods or B) is the log odds that the protein is differentially expressed. For example, if B = 1.5, the odds of differential expression is $e^{1.5} = 4.48$, i.e, about four and a half to one. The probability that the protein is differentially expressed is $4.48 / (1 + 4.48) = 0.82$. A B-statistic of zero corresponds to a 50-50 chance that the gene is differentially expressed. The B-statistic has been automatically adjusted for multiple testing by assuming that 1% of the proteins are expected to be differentially expressed.\n\n```{r fit_linear_model, include = FALSE}\n\nfactors <- c(\"Group\", \"Run\")\n\nmodel <- as.formula(paste(c(\"~ 0\", factors), collapse = \" + \"))\n\nfittedLinearModels <- list()\nfittedLinearModelsExcludingControls <- list()\n\nfor (analysis in names(combinedProteinData))\n{\n  cat(analysis, \"\\n\", sep = \"\")\n  data <- combinedProteinData[[analysis]]\n\n  # log2 transform\n  exprs(data) <- log2(exprs(data))\n\n  design <- model.matrix(model, data = pData(data))\n\n  colnames(design) <- colnames(design) %>%\n    sub(pattern = \"^Group\", replacement = \"\") %>%\n    gsub(pattern = \" \", replacement = \"_\")\n\n  fittedLinearModels[[analysis]] <- lmFit(data, design = design)\n\n  samples <- pData(data) %>%\n    rownames_to_column(\"Sample\") %>%\n    filter(Group != controlGroup) %>%\n    select(Sample) %>%\n    unlist(use.names = FALSE)\n\n  data <- data[, sampleNames(data) %in% samples]\n\n  design <- model.matrix(model, data = pData(data))\n\n  colnames(design) <- colnames(design) %>%\n    sub(pattern = \"^Group\", replacement = \"\") %>%\n    gsub(pattern = \" \", replacement = \"_\")\n\n  fittedLinearModelsExcludingControls[[analysis]] <- lmFit(data, design = design)\n}\n```\n\n```{r contrasts, include = FALSE}\n\ncontrasts <- c(\n  \"ER 45min vs ER 0min\",\n  \"ER 90min vs ER 0min\",\n  \"ER 90min vs ER 45min\",\n  \"FOXA1 45min vs FOXA1 0min\",\n  \"FOXA1 90min vs FOXA1 0min\",\n  \"FOXA1 90min vs FOXA1 45min\"\n)\n\nreformatGroup <- function(x) gsub(x, pattern = \" \", replacement = \"_\")\n\nreformatContrasts <- function(x)\n{\n  x %>%\n    gsub(pattern = \" \", replacement = \"_\") %>%\n    sub(pattern = \"_-_\", replacement = \" - \") %>%\n    sub(pattern = \"_vs_\", replacement = \" - \")\n}\n\nreformattedContrasts <- reformatContrasts(contrasts)\n\nfittedContrasts <- list()\n\nfor (analysis in names(combinedProteinData))\n{\n  cat(analysis, \"\\n\", sep = \"\")\n  fittedLinearModel <- fittedLinearModels[[analysis]]\n  # fittedLinearModel <- fittedLinearModelsExcludingControls[[analysis]]\n  contrastMatrix <- makeContrasts(contrasts = reformattedContrasts, levels = fittedLinearModel$design)\n  fittedContrasts[[analysis]] <- contrasts.fit(fittedLinearModel, contrastMatrix)\n  fittedContrasts[[analysis]] <- eBayes(fittedContrasts[[analysis]], trend = TRUE, robust = TRUE)\n}\n```\n\n```{r create_contrast_results, include = FALSE}\n\ncreateContrastResults <- function(\n  msnset,\n  fittedLinearModel,\n  fittedLinearModelExcludingControls,\n  fittedContrasts,\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n{\n  reformattedContrast <- reformatContrasts(paste(contrastGroups, collapse = \" - \"))\n  reformattedContrastGroups <- reformattedContrast %>% strsplit(\" - \") %>% unlist\n  reformatedControlGroup <- reformatGroup(controlGroup)\n\n  results <- topTable(fittedContrasts, coef = reformattedContrast, number = Inf, sort.by = \"none\")\n\n  fittedIntensities <- as.data.frame(fittedLinearModel$coefficients)\n  # fittedIntensities <- as.data.frame(fittedLinearModelExcludingControls$coefficients)\n  contrastFittedIntensities <- select(fittedIntensities, one_of(reformattedContrastGroups))\n  results$logFC <- contrastFittedIntensities[, 1] - contrastFittedIntensities[, 2]\n\n  fittedIntensities <- as.data.frame(fittedLinearModel$coefficients)\n  contrastFittedIntensities <- select(fittedIntensities, one_of(reformattedContrastGroups))\n  controlFittedIntensities <- fittedIntensities[, reformatedControlGroup]\n  results$logFCcontrol = apply(contrastFittedIntensities - controlFittedIntensities, 1, max)\n\n  samples <- pData(msnset) %>%\n    mutate(Sample = rownames(.)) %>%\n    filter(Group %in% c(contrastGroups, controlGroup)) %>%\n    select(Sample) %>%\n    unlist(use.names = FALSE)\n\n  intensities <- exprs(msnset) %>%\n    as.data.frame %>%\n    select(one_of(samples))\n\n  # add N column for the number of replicates, i.e. runs where intensity\n  # is not NA for both groups\n  n <- rep(0, nrow(intensities))\n  for (run in runs)\n  {\n    samples <- pData(msnset) %>%\n      mutate(Sample = rownames(.)) %>%\n      filter(Group %in% contrastGroups) %>%\n      filter(Run == run) %>%\n      select(Sample) %>%\n      unlist(use.names = FALSE)\n    n <- n +\n      intensities %>%\n      select(one_of(samples)) %>%\n      transmute(n = ifelse(complete.cases(.), 1, 0)) %>%\n      unlist(use.names = FALSE)\n  }\n\n  results <- results %>%\n    mutate(N = n) %>%\n    bind_cols(fittedIntensities %>% select(one_of(rev(reformattedContrastGroups), controlGroup))) %>%\n    bind_cols(intensities) %>%\n    left_join(proteinInfo, by = \"Protein\")\n\n  results <- bind_cols(\n    results %>% select(Protein, Gene, Description, N),\n    results %>% select(-Protein, -Gene, -Description, -N)\n  )\n\n  results \n}\n\n```\n\nThe IgG control was used to assess non-specific binding. The binding of a protein is considered to be non-specific if the log~2~ fold change relative to the IgG control is less than `r controlLogFoldChangeThreshold`. In the differential expression analysis, protein expression values are fitted to a linear model and the fitted values for each condition being compared are also compared to the IgG control. For each comparison of two groups, the maximum log~2~ fold change from each of the two groups above the IgG control is used to determine if the binding is specific.\n\n\\newpage\n\n```{r contrast_1, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, no normalization\"\nanalysis <- \"ExcludeMissingValues_NoNormalization\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_1, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_1, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 20,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_1, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 20,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_1, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_1, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\\newpage\n\n```{r contrast_2, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_2, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_2, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 50,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_2, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 50,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_2, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_2, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\\newpage\n\n```{r contrast_3, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization excluding IgG control\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalizationExcludingIgG\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_3, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_3, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 50,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_3, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 50,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_3, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_3, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\\newpage\n\n```{r contrast_4, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, scale normalization\"\nanalysis <- \"ExcludeMissingValues_ScaleNormalization\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_4, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_4, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 50,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_4, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 50,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_4, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_4, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\\newpage\n\n```{r contrast_5, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- paste(\"excluding peptides with missing intensities, scale normalization using top\", numberOfPeptidesWithHighestIgG, \"IgG peptides\")\nanalysis <- \"ExcludeMissingValues_ScaleNormalizationTopIgG\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_5, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_5, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 50,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_5, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 50,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_5, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_5, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\\newpage\n\n```{r contrast_6, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"KNN nearest neighbour averaging imputation of missing values, quantile normalization\"\nanalysis <- \"ImputeKNN_QuantileNormalization\"\n```\n\n## `r paste(contrastName, processingDescription, sep = \", \")`\n\n```{r results_6, include = FALSE}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n```\n\n```{r ma_plot_6, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"MA plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(maPlot(results,\n             significanceLevel = significanceLevel,\n             controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 50,\n             pointSize = 1.5))\n```\n\n```{r volcano_plot_6, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Volcano plot of the average intensity against log~2~ fold change for the \", contrastName, \" comparison (\", processingDescription, \"). Top ranking differentially-expressed proteins with false discovery rate below 0.05 are highlighted in pink. Open circles indicate that the protein is non-specific from the IgG control comparison.\", sep = \"\"), fig.height=6}\nprint(volcanoPlot(results,\n                  significanceLevel = significanceLevel,\n                  minLogFoldChange = -2.0,\n                  maxLogFoldChange = 2.75,\n                  controlLogFoldChangeThreshold = controlLogFoldChangeThreshold,\n                  minLogFoldChangeForLabelling = 1.5,\n                  maxNumberLabelledProteins = 50,\n                  pointSize = 1.5))\n```\n\n```{r pvalue_histogram_6, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Histogram of p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=3.5, fig.width=4.5}\nprint(histogram(results, \"P.Value\", xlab = \"p-value\"))\n```\n\n```{r qq_plot_6, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"QQ plot of the adjusted p-values for the \", contrastName, \" comparison (\", processingDescription, \")\", sep = \"\"), fig.height=5, fig.width=5}\nq <- results %>%\n  select(adj.P.Val) %>%\n  filter(!is.na(adj.P.Val)) %>%\n  arrange(adj.P.Val) %>%\n  unlist %>%\n  as.numeric\nqqplot(-log10(ppoints(length(q))),\n       -log10(q),\n       xlab=expression(Expected~~-log[10](italic(q))),\n       ylab=expression(Observed~~-log[10](italic(q))))\nabline(0, 1, col = \"red\")\n```\n\n\n\\newpage\n\n# Comparison of differential expression analysis approaches\n\nIn this section, comparisons of the differential expression results obtained using differing methods for handling missing values and varying normalization techniques are presented. The B-statistic (log odds) is used to rank the proteins from most significantly differentially expressed to least significant. Scatter plots of both the B-statistic generated for the two methods being compared and the rank are presented. The protein with the highest B-statistic, i.e. the most significantly differentially expressed protein, is given a rank of 1.\n\nDiffering imputation methods have relatively little effect on the results for most proteins. This is largely because only a small proportion of the proteins have peptide-level measurements containing missing values. There are a few proteins that are only represented in the differential expression results when imputation is carried out, for which all peptide-level measurements contain missing values. These proteins are not represented in the comparions with the analysis in which measurements with missing values are removed.\n\nDifferent normalization approaches have a more substantial impact on the differential expression analysis.\n\n\\newpage\n\n## Removal of missing values vs KNN imputation (quantile normalization in both)\n\n```{r exclude_missing_vs_knn_imputation, include = FALSE}\n\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\n\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults1 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nanalysis <- \"ImputeKNN_QuantileNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults2 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nresults <- inner_join(\n  results1 %>% select(Protein, B1 = B),\n  results2 %>% select(Protein, B2 = B),\n  by = \"Protein\"\n  ) %>%\n  filter(complete.cases(.)) %>%\n  mutate(rank1 = rank(-B1), rank2 = rank(-B2))\n```\n\n```{r exclude_missing_vs_knn_imputation_B_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of B-statistic (log odds) for differential expression of proteins for the \", contrastName, \" contrast, comparing results following exclusion of missing values and KNN imputation.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"B1\", \"B2\", \"B-statistic (excluding missing values)\", \"B-statistic (KNN imputation)\"))\n```\n\n```{r exclude_missing_vs_knn_imputation_rank_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of the rank of differentially-expressed proteins for the \", contrastName, \" contrast, comparing results following exclusion of missing values and KNN imputation.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"rank1\", \"rank2\", \"Rank (excluding missing values)\", \"Rank (KNN imputation)\"))\n```\n\n\\newpage\n\n## Removal of missing values vs lowest value imputation (quantile normalization in both)\n\n```{r exclude_missing_vs_min_imputation, include = FALSE}\n\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\n\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults1 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nanalysis <- \"ImputeMin_QuantileNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults2 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nresults <- inner_join(\n  results1 %>% select(Protein, B1 = B),\n  results2 %>% select(Protein, B2 = B),\n  by = \"Protein\"\n  ) %>%\n  filter(complete.cases(.)) %>%\n  mutate(rank1 = rank(-B1), rank2 = rank(-B2))\n```\n\n```{r exclude_missing_vs_min_imputation_B_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of B-statistic (log odds) for differential expression of proteins for the \", contrastName, \" contrast, comparing results following exclusion of missing values and lowest value imputation.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"B1\", \"B2\", \"B-statistic (excluding missing values)\", \"B-statistic (lowest value imputation)\"))\n```\n\n```{r exclude_missing_vs_min_imputation_rank_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of the rank of differentially-expressed proteins for the \", contrastName, \" contrast, comparing results following exclusion of missing values and lowest value imputation.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"rank1\", \"rank2\", \"Rank (excluding missing values)\", \"Rank (lowest value imputation)\"))\n```\n\n\\newpage\n\n## Quantile vs Scale normalization (missing values excluded in both)\n\n```{r quantile_vs_scale_normalization, include = FALSE}\n\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\n\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults1 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nanalysis <- \"ExcludeMissingValues_ScaleNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults2 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nresults <- inner_join(\n  results1 %>% select(Protein, B1 = B),\n  results2 %>% select(Protein, B2 = B),\n  by = \"Protein\"\n  ) %>%\n  filter(complete.cases(.)) %>%\n  mutate(rank1 = rank(-B1), rank2 = rank(-B2))\n```\n\n```{r scale_vs_quantile_normalization_B_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of B-statistic (log odds) for differential expression of proteins for the \", contrastName, \" contrast, comparing results following quantile and scale normalization.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"B1\", \"B2\", \"B-statistic (quantile normalization)\", \"B-statistic (scale normalization)\"))\n```\n\n```{r scale_vs_quantile_normalization_rank_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of the rank of differentially-expressed proteins for the \", contrastName, \" contrast, comparing results following quantile and scale normalization.\", sep = \"\"), fig.height=2.9, fig.width=3.5}\nprint(scatterPlot(results, \"rank1\", \"rank2\", \"Rank (quantile normalization)\", \"Rank (scale normalization)\"))\n```\n\n\\newpage\n\n## Scale normalization based on all peptides vs peptides with highest IgG intensities (missing values excluded in both)\n\n```{r scale_normalization_all_vs_topIgG, include = FALSE}\n\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\n\nanalysis <- \"ExcludeMissingValues_ScaleNormalization\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults1 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nanalysis <- \"ExcludeMissingValues_ScaleNormalizationTopIgG\"\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\nresults2 <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\nresults <- inner_join(\n  results1 %>% select(Protein, B1 = B),\n  results2 %>% select(Protein, B2 = B),\n  by = \"Protein\"\n  ) %>%\n  filter(complete.cases(.)) %>%\n  mutate(rank1 = rank(-B1), rank2 = rank(-B2))\n```\n\n```{r scale_normalization_all_vs_topIgG_B_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of B-statistic (log odds) for differential expression of proteins for the \", contrastName, \" contrast, comparing results following scale normalization based on all peptides and those with the highest IgG intensities.\", sep = \"\"), fig.height=2.5, fig.width=3.5}\nprint(scatterPlot(results, \"B1\", \"B2\", \"B-statistic (scale normalization based on all peptides)\", \"B-statistic (scale normalization, peptides with highest IgG)\"))\n```\n\n```{r scale_normalization_all_vs_topIgG_rank_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=paste(\"Plot of the rank of differentially-expressed proteins for the \", contrastName, \" contrast, comparing results following scale normalization based on all peptides and those with the highest IgG intensities.\", sep = \"\"), fig.height=2.5, fig.width=3.5}\nprint(scatterPlot(results, \"rank1\", \"rank2\", \"Rank (scale normalization based on all peptides)\", \"Rank (scale normalization, peptides with highest IgG)\"))\n```\n\n\\newpage\n\n\n# Comparisoin of variance between specfic and non-specific binding\n\n```{r  echo=FALSE, warning=FALSE, message=FALSE}\n\n\nload(\"20161017_Holding_FM_RIME_TMT.RData\")\n\nmaPlot <- function(differentialExpressionResults, selectedGenes = NULL,\n                   xlab = expression(average~log[2](intensity)),\n                   ylab = expression(log[2](fold~change)),\n                   significanceLevel = 0.05,\n                   minLogFoldChangeForLabelling = 1.5,\n                   maxNumberLabelledProteins = 50,\n                   controlLogFoldChangeThreshold = -Inf,\n                   pointSize = 2.5) {\n  if (!\"logFCcontrol\" %in% colnames(differentialExpressionResults))\n    differentialExpressionResults$logFCcontrol <- Inf\n\n  differentialExpressionResults$group <-\n    ifelse(differentialExpressionResults$Gene %in% selectedGenes, 0,\n    ifelse(!is.na(differentialExpressionResults$adj.P.Val) & differentialExpressionResults$adj.P.Val <= significanceLevel & differentialExpressionResults$logFCcontrol >= controlLogFoldChangeThreshold, 1,\n    ifelse(!is.na(differentialExpressionResults$adj.P.Val) & differentialExpressionResults$adj.P.Val <= significanceLevel, 2,\n    ifelse(abs(differentialExpressionResults$logFC) >= minLogFoldChangeForLabelling & differentialExpressionResults$logFCcontrol >= controlLogFoldChangeThreshold, 3,\n    ifelse(abs(differentialExpressionResults$logFC) >= minLogFoldChangeForLabelling, 4,\n    ifelse(differentialExpressionResults$logFCcontrol >= controlLogFoldChangeThreshold, 5, 6))))))\n\n  # 0 - selected\n  # 1 - significant, specific\n  # 2 - significant, non-specific\n  # 3 - non-significant, large logfc, specific\n  # 4 - non-significant, large logfc, non-specific\n  # 5 - specific\n  # 6 - non-specific\n\n  differentialExpressionResults <- differentialExpressionResults %>% arrange(desc(group))\n\n  differentialExpressionResults$group <- factor(differentialExpressionResults$group, 0:6)\n\n  differentialExpressionResults <- differentialExpressionResults %>%\n    mutate(label = paste(\" \", Gene)) %>%\n    mutate(logFCcontrolAlpha = pmin(logFCcontrol, 2.0))\n\n  labelSubset <- bind_rows(\n    differentialExpressionResults %>%\n      filter(group != 0 & adj.P.Val <= significanceLevel) %>%\n      arrange(desc(abs(logFC))) %>%\n      slice(1:(maxNumberLabelledProteins / 2)),\n    differentialExpressionResults %>%\n      filter(group != 0 & abs(logFC) >= minLogFoldChangeForLabelling) %>%\n      arrange(desc(abs(logFC))) %>%\n      slice(1:maxNumberLabelledProteins)\n  ) %>%\n    unique %>%\n    slice(1:maxNumberLabelledProteins)\n\n\n  \n    if (maxNumberLabelledProteins == 0) labelSubset <- labelSubset %>% slice(0)\n \n  # plot <- ggplot(differentialExpressionResults, aes(x = AveExpr, y = logFC, colour = group, size = group, shape = group, alpha = logFCcontrolAlpha))\n  plot <- ggplot(differentialExpressionResults, aes(x = AveExpr, y = logFC, colour = group))+ coord_cartesian(ylim = c(-3.5,3.5))\n  plot <- plot + geom_hline(yintercept = 0, color=\"gray50\", size = 0.5)\n  plot <- plot + geom_point(alpha=0.75)\n  plot <- plot + geom_text(data = labelSubset, aes(label = label), hjust = 0, size = 3.5)\n  plot <- plot + geom_point(data = subset(differentialExpressionResults, group == 0), alpha = 0.7)\n  plot <- plot + geom_text(data = subset(differentialExpressionResults, group == 0), aes(label = label), hjust = 0, size = 4.0, alpha = 1)\n  plot <- plot + scale_colour_manual(values = c(\"green\", \"red\", \"blue\", \"red\", \"blue\", \"red\", \"blue\"), drop = FALSE)\n  # plot <- plot + scale_colour_manual(values = c(\"blue\", \"deeppink3\", \"deeppink3\", \"gray50\", \"gray50\", \"gray50\", \"gray50\"), drop = FALSE)\n  # plot <- plot + scale_size_manual(values = c(1.2 * pointSize, pointSize, pointSize, 0.8 * pointSize, 0.8 * pointSize, 0.6 * pointSize, 0.6 * pointSize), drop = FALSE)\n  # plot <- plot + scale_shape_manual(values = c(16, 16, 1, 16, 1, 16, 1), drop = FALSE)\n  #plot <- plot + scale_alpha(range = c(0.2, 1.0))\n  plot <- plot + xlab(xlab)\n  plot <- plot + ylab(ylab)\n  plot <- plot + theme_bw()\n  plot <- plot + theme(\n    text = element_text(size = 14),\n    legend.position = \"none\"\n  )\n\n  save(differentialExpressionResults,file=\"dER.rda\") \n\n  return(plot)\n}\n\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\n\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  c(\"ER 45min\", \"ER 0min\"),\n  controlGroup,\n  proteinInfo)\n\n\n```\n\n```{r MA_specificVsNonSpecfic, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"MA plot showing the distribution of non-specific binding. Non-specific binding was identified as proteins that showed less than a log2 enrichment over the IgG channel at either 0 or 45 minutes. The majority of non-specific binding (blue) is found to show less change between time points whereas the specific interactions (red) shows a broader distribution.\", fig.height=2.5, fig.width=3.5}\n\nprint(maPlot(results,\n             significanceLevel = 0.5,\n             controlLogFoldChangeThreshold = 1.0,\n             minLogFoldChangeForLabelling = 1.5,\n             maxNumberLabelledProteins = 0,\n             pointSize = 1.5))\n```\n\n```{r  echo=FALSE, warning=FALSE, message=FALSE}\n\nload(\"dER.rda\")\nas.numeric(differentialExpressionResults$group)%%2->differentialExpressionResults$group\n\ntmp<-differentialExpressionResults\n\n```\n\n```{r density_specificVsNonSpecfici, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\"Density plot right showing the distribution of non-specific binding. Non-specific binding was identified as proteins that showed less than a log2 enrichment over the IgG channel at either 0 or 45 minutes. The majority of non-specific binding (blue) is found to show less change between time points whereas the specific interactions (red) shows a broader distribution.\", fig.height=3.5, fig.width=4.5}\n\nplot(density(tmp$logFC[tmp$group==1]),col=\"blue\",ylab=\"Density\", xlab=\"Fold Change\", main=\"\", xlim=c(3,-3), lwd=2)\nlines(density(tmp$logFC[tmp$group==0]),col=\"red\",lwd=2)\n\n```\n\n```{r box_specificVsNonSpecfici, echo=FALSE, warning=FALSE, message=FALSE, fig.cap=\" Box plot showing the variance of non-specific vs non-specific binding. Non-specific binding was identified as proteins that showed less than a log2 enrichment over the IgG channel at either 0 or 45 minutes. The the variance of the log fold changes for the non-specific binding interactions was significantly less than that of the specific interactions (F-test, one-sided, p-value < 2.2e*-16).\", fig.height=3.5, fig.width=4.5}\n\nboxplot(tmp$logFC[tmp$group==1],tmp$logFC[tmp$group==0],ylab=\"Fold Change\", names=c(\"Non-specific\",\"Specific\"), col=c(\"#0000FFAA\",\"#FF0000AA\"))\n\n```\n\n```{r  echo=FALSE, warning=FALSE, message=FALSE}\n\nvar.test(tmp$logFC[tmp$group==1],tmp$logFC[tmp$group==0], alternative=\"less\")\n\n\n\n```\n\n\n\\newpage\n\n\n# Differential expression results tables\n\n```{r contrast_results_thresholds, include = FALSE}\nsignificanceLevel <- 0.05\nlogFoldChangeThreshold <- 1.0\ncontrolLogFoldChangeThreshold <- 1.0\n```\n\nThe following tables contain the top ranking differentially expressed proteins for each comparison. Included are all proteins that reach a statistical signficance of `r significanceLevel` in terms of the adjusted p-value and those with an absolute log~2~ fold change of `r logFoldChangeThreshold` or above.\n\nThe IgG column gives the larger of the log~2~ fold changes for the two groups against the IgG control and an asterisk indicates specific binding where this log~2~ fold change is above a threshold of `r controlLogFoldChangeThreshold`. N is the number of replicates in which the protein was observed.\n\nIn all cases, peptide intensities were quantile normalized and measurements with missing values were removed prior to summarization at the protein level.\n\n```{r contrast_results_table, include = FALSE}\n\ncontrastResultsTable <- function(results, contrastName,\n                                 significanceLevel = 0.05,\n                                 logFoldChangeThreshold = 1.0,\n                                 controlLogFoldChangeThreshold = 1.0)\n{\n  resultsTable <- results %>%\n    select(Protein, Gene, N, logFC, AveExpr, adj.P.Val, B, logFCcontrol)\n\n  resultsTable$Specific <- ifelse(resultsTable$logFCcontrol >= controlLogFoldChangeThreshold, \"*\", \"\")\n\n  resultsTable <- resultsTable %>%\n    filter(adj.P.Val < 0.05 | abs(logFC) >= 1.0) %>%\n    arrange(desc(abs(logFC)))\n\n  colnames(resultsTable) <- c(\"Protein\", \"Gene\", \"N\", \"log2FC\", \"Avg Expr\", \"p-value\", \"B\", \"IgG\", \"\")\n\n  print(\n    xtable(\n      resultsTable,\n      align = \"lllrrrrrrl\",\n      display = c(\"d\", \"s\", \"s\", \"d\", \"f\", \"f\", \"g\", \"f\", \"f\", \"s\"),\n      caption = paste(\"Top ranking differentially expressed proteins from the\", contrastName, \"comparison,  sorted by log2 fold change.\")\n    ),\n    include.rownames = FALSE,\n    tabular.environment = \"longtable\",\n    floating = FALSE,\n    add.to.row = addtorow\n  )\n}\n```\n\n\\newpage\n\n```{r results_table_contrast_1_config, include = FALSE}\ncontrastGroups <- c(\"ER 45min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_1, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\\newpage\n\n```{r results_table_contrast_2_config, include = FALSE}\ncontrastGroups <- c(\"ER 90min\", \"ER 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_2, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\\newpage\n\n```{r results_table_contrast_3_config, include = FALSE}\ncontrastGroups <- c(\"ER 90min\", \"ER 45min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_3, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\\newpage\n\n```{r results_table_contrast_4_config, include = FALSE}\ncontrastGroups <- c(\"FOXA1 45min\", \"FOXA1 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_4, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\\newpage\n\n```{r results_table_contrast_5_config, include = FALSE}\ncontrastGroups <- c(\"FOXA1 90min\", \"FOXA1 0min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_5, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\\newpage\n\n```{r results_table_contrast_6_config, include = FALSE}\ncontrastGroups <- c(\"FOXA1 90min\", \"FOXA1 45min\")\ncontrastName <- paste(contrastGroups, collapse = \" vs \")\nprocessingDescription <- \"excluding peptides with missing intensities, quantile normalization\"\nanalysis <- \"ExcludeMissingValues_QuantileNormalization\"\n```\n\n## `r contrastName`\n\n```{r results_table_contrast_6, echo=FALSE, warning=FALSE, message=FALSE, results='asis'}\n\ndata <- combinedProteinData[[analysis]]\nexprs(data) <- log2(exprs(data))\n\nresults <- createContrastResults(\n  data,\n  fittedLinearModels[[analysis]],\n  fittedLinearModelsExcludingControls[[analysis]],\n  fittedContrasts[[analysis]],\n  runs,\n  contrastGroups,\n  controlGroup,\n  proteinInfo)\n\ncontrastResultsTable(results, contrastName,\n                     significanceLevel = 0.05,\n                     logFoldChangeThreshold = 1.0,\n                     controlLogFoldChangeThreshold = 1.0)\n\nresultsFile <- paste(paste(gsub(\" \", \"_\", contrastGroups), collapse = \"_vs_\"), analysis, \"txt\", sep = \".\")\nwrite.table(results, resultsFile, sep = \"\\t\", row.names = FALSE, quote = FALSE)\n```\n\n\n\n```{r save, eval = TRUE, include = FALSE, cache = FALSE}\nsave.image(file = \"20161017_Holding_FM_RIME_TMT.RData\")\n```\n\n",
    "created" : 1486555089617.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1995799955",
    "id" : "BBAA0D07",
    "lastKnownWriteTime" : 1486559773,
    "last_content_update" : 1486559773551,
    "path" : "~/Dropbox (Cambridge University)/Work/CRUK/Manuscripts/QRIME/analysis20160109/20161017_Holding_FM_RIME_TMT.Rmd",
    "project_path" : "20161017_Holding_FM_RIME_TMT.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}