dba.plotMA(dba.raw.analysis,contrast=2,bSmooth=FALSE,bFlip = F)
dba.plotMA(dba.analysis,contrast=2,bSmooth=FALSE,bFlip = F)
par(mfrow=c(1,2))
dba.plotMA(dba.raw.analysis,contrast=5,bSmooth=FALSE,bFlip = F)
dba.plotMA(dba.analysis,contrast=5,bSmooth=FALSE,bFlip = F)
par(mfrow=c(1,2))
dba.plotMA(dba.raw.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
par(mfrow=c(1,2))
dba.plotMA(dba.analysis,contrast=9,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.raw.analysis,contrast=9,bSmooth=FALSE,bFlip = T)
#DESeq2 only pipeline
jg.experimentPeakset <- jg.dbaGetPeakset(dbaExperiment)
#Convert Peakset to DESeq Workflow
jg.experimentPeaksetDeSeq<-jg.convertPeakset(jg.experimentPeakset)
jg.controlPeakset    <- jg.dbaGetPeakset(dbaControl)
jg.controlPeaksetDeSeq<-jg.convertPeakset(jg.controlPeakset)
#Establish size factors directly from control data
jg.controlSizeFactors = estimateSizeFactorsForMatrix(jg.controlPeaksetDeSeq)
#Get conditions dataframe for DeSeq
jg.conditions <- read.csv(file=jg.controlSampleSheet, header=TRUE, sep=",")['Condition']
#Run DeSeq on control
jg.controlDeSeq<-jg.runDeSeq(jg.controlPeaksetDeSeq, jg.conditions,jg.controlSizeFactors)
jg.controlResultsDeseq   = results(jg.controlDeSeq)
#Run DeSeq on experiment
jg.experimentDeSeq<-jg.runDeSeq(jg.experimentPeaksetDeSeq, jg.conditions,jg.controlSizeFactors)
jg.experimentResultsDeseq   = results(jg.experimentDeSeq,contrast=c("Condition","Fulvestrant","Control"))
jg.plotDeSeq(jg.controlResultsDeseq,
p=0.01,
title.main="Fold-change in H2av Occupany",
flip=F
)
jg.plotDeSeq(jg.experimentResultsDeseq,
p=0.01,
title.main="Fold-change in ER binding",
flip=F
)
#Draw Combined figure.
jg.plotDeSeqCombined(jg.controlResultsDeseq,
jg.experimentResultsDeseq,
title.main="ER and H2av Binding Folding changes on ER treatment",
p=0.01,flip=F)
dba.plotMA(dba.raw.analysis,contrast=9,bSmooth=FALSE,bFlip = T, cex=0.1)
dba.plotMA(dba.raw.analysis,contrast=9,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.analysis,contrast=9,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.raw.analysis,contrast=9,bSmooth=FALSE,bFlip = T)
par(mfrow=c(2,1))
dba.plotMA(dba.raw.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
par(mfrow=c(2,1))
dba.plotMA(dba.raw.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
dba.plotMA(dba.analysis,contrast=8,bSmooth=FALSE,bFlip = T)
knitr::opts_chunk$set(echo = TRUE)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
######################
#
# Settings
#
######################
setwd("/Volumes/Flypeaks/FulvestantPeaks")
######################
#
# Functions
#
######################
write.bed<-function(dba, filename){
score <- -10*(log10(dba$FDR))
write.table(cbind(dba[,1:3],rownames(dba),score),
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
vulcan.import.dba<- function (dbaobj, samples,intervals = NULL)
{
dbcounts <- dbaobj
listcounts <- dbcounts$peaks
names(listcounts) <- dbcounts$samples[, 1]
first <- listcounts[[1]]
rawmat <- matrix(NA, nrow = nrow(first), ncol = length(listcounts) +
3)
colnames(rawmat) <- c("Chr", "Start", "End", names(listcounts))
rownames(rawmat) <- 1:nrow(rawmat)
rawmat <- as.data.frame(rawmat)
rawmat[, 1] <- as.character(first[, 1])
rawmat[, 2] <- as.integer(first[, 2])
rawmat[, 3] <- as.integer(first[, 3])
for (i in 1:length(listcounts)) {
rawmat[, names(listcounts)[i]] <- as.numeric(listcounts[[i]]$RPKM)
}
peakrpkms <- rawmat
rm(rawmat)
first <- listcounts[[1]]
rawmat <- matrix(NA, nrow = nrow(first), ncol = length(listcounts) +
3)
colnames(rawmat) <- c("Chr", "Start", "End", names(listcounts))
rownames(rawmat) <- 1:nrow(rawmat)
rawmat <- as.data.frame(rawmat)
rawmat[, 1] <- as.character(first[, 1])
rawmat[, 2] <- as.integer(first[, 2])
rawmat[, 3] <- as.integer(first[, 3])
for (i in 1:length(listcounts)) {
rawmat[, names(listcounts)[i]] <- as.integer(listcounts[[i]]$Reads)
}
peakcounts <- rawmat
rm(rawmat)
vobj <- list(peakcounts = peakcounts, samples = samples,
peakrpkms = peakrpkms)
return(vobj)
}
prependSampleNames <- function(vobj,prependString){
colnames(vobj$peakcounts)[0:-3]<-paste0(prependString,colnames(vobj$peakcounts)[0:-3])
vobj$samples[[2]]<-paste0(prependString,vobj$samples[[2]])
vobj$samples[[1]]<-paste0(prependString,vobj$samples[[1]])
colnames(vobj$peakrpkms)[0:-3]<-paste0(prependString,colnames(vobj$peakrpkms)[0:-3])
return(vobj)
}
loadVulcanNetworks<-function(){
regulons<-list()
load("networks/laml-tf-regulon.rda")
regulons$laml<-regul
rm(regul)
load("networks/brca-tf-regulon.rda")
regulons$tcga<-regul
rm(regul)
load("networks/metabric-regulon-tfs.rda")
regulons$metabric<-regulon
rm(regulon)
return(regulons)
}
plotVulcan <-function(vobj,threshold,network_title,title,plotTF,xlim,ylim) {
threshold<-sign(threshold)*p2z(abs(threshold))
network=vobj$mrs[,"NES"]
tfs<-names(network)
networkmat<-cbind(rep(0,length(network)),network[tfs])
colnames(networkmat)<-c("0h","24h")
matplot(t(networkmat),type="l",col="grey",ylab="VULCAN NES",xaxt="n",lty=1,main=title,xlim=xlim,ylim=ylim)
axis(1,at=c(1:2),labels=colnames(networkmat))
abline(h=c(0,threshold,-threshold),lty=2)
text(2,networkmat[plotTF,2],label=names(networkmat[,2][plotTF]),pos=4,cex=0.6,font=2,col="red3")
mtext(network_title)
}
getTFs <-function(vobj,threshold=NA){
if (is.na(threshold)){
TFs<-names(vobj$mrs[,"NES"])
}else if (threshold>0) {
TFs<-names(vobj$mrs[,"NES"][(vobj$mrs[,"NES"]>p2z(threshold))])
}else if (threshold<0) {
TFs<-names(vobj$mrs[,"NES"][(vobj$mrs[,"NES"]<sign(threshold)*p2z(-threshold))])
}
if (length(TFs) == 0)
{   #plot Function doesn't like no labels.
TFs<-names(vobj$mrs[,"NES"])
}
return(TFs)
}
load("Rdata/001_Brundle_SLX-8047_dba_report.rda")
#Extract The down regulated and the unchanged/constant peak set.
Down<-as.data.frame(dba.SLX8047_report[
dba.SLX8047_report$FDR<0.01 &
dba.SLX8047_report$Fold < -2
])
Constant<-as.data.frame(dba.SLX8047_report[
dba.SLX8047_report$FDR>0.01 &
dba.SLX8047_report$Fold > -1 &
dba.SLX8047_report$Fold < 1
])
library(vulcan)
library("org.Hs.eg.db")
#Create subsets of peaks for analysis
dba.SLX8047_Dn<-dba.SLX8047
dba.SLX8047_Cn<-dba.SLX8047
for (sample_no in 1:length(dba.SLX8047$samples[,1])) {
dba.SLX8047_Dn$peaks[[sample_no]] <-
dba.SLX8047$peaks[[sample_no]][dba.SLX8047_report$FDR < 0.01 &
dba.SLX8047_report$Fold < -2, ]
dba.SLX8047_Cn$peaks[[sample_no]] <-
dba.SLX8047$peaks[[sample_no]][dba.SLX8047_report$FDR > 0.01 &
dba.SLX8047_report$Fold > -1 &
dba.SLX8047_report$Fold < 1, ]
}
#Create sample list
samples <- list()
samples[['Fulvestrant']]<-c('1a','2a','3a','4a')
samples[['none']]<-c('1b','2b','3b','4b')
#Load in data normalised to H2Av spike-in with Brundle
vobj_Cn <-vulcan.import.dba(dba.SLX8047_Cn,samples)
vobj_Dn <-vulcan.import.dba(dba.SLX8047_Dn,samples)
vobj_All<-vulcan.import.dba(dba.SLX8047,samples)
#Unormalised data
#load("Rdata/001_Brundle_SLX-8047_vobj.Rda")
#Vulcan anotated doesn't work with samples with numbers at start of the names
#Solution is to put X in fron for the numbers.
vobj_Cn <-prependSampleNames(vobj_Cn,"X")
vobj_Dn <-prependSampleNames(vobj_Dn,"X")
vobj_All<-prependSampleNames(vobj_All,"X")
#Vulcan Pipeline
vobj_Cn<-vulcan.annotate(vobj_Cn,lborder=-10000,rborder=10000,method="sum")
vobj_Dn<-vulcan.annotate(vobj_Dn,lborder=-10000,rborder=10000,method="sum")
vobj_All<-vulcan.annotate(vobj_All,lborder=-10000,rborder=10000,method="sum")
vobj_Cn<-vulcan.normalize(vobj_Cn)
vobj_Dn<-vulcan.normalize(vobj_Dn)
vobj_All<-vulcan.normalize(vobj_All)
## Load Networks
regulons <- loadVulcanNetworks()
list_eg2symbol<-as.list(org.Hs.egSYMBOL[mappedkeys(org.Hs.egSYMBOL)])
networks<-c("tcga","metabric") #,"laml")
vobj_Cn_results<-list()
vobj_Dn_results<-list()
vobj_All_results<-list()
for (network in networks) {
vobj_Cn_results[[network]]<-vulcan(vobj_Cn,
network=regulons[[network]],
contrast=c("Fulvestrant","none"),
annotation=list_eg2symbol)
vobj_Dn_results[[network]]<-vulcan(vobj_Dn,
network=regulons[[network]],
contrast=c("Fulvestrant","none"),
annotation=list_eg2symbol)
vobj_All_results[[network]]<-vulcan(vobj_All,
network=regulons[[network]],
contrast=c("Fulvestrant","none"),
annotation=list_eg2symbol)
}
## Visualize the relative TF activity
vobj_objects<-list(vobj_Cn_results,vobj_Dn_results,vobj_All_results)
names(vobj_objects)<-c("Constant","Down","All")
networks<-c("tcga","metabric")
interect_All<-intersect(rownames(vobj_All_results$metabric$mrs),
rownames(vobj_All_results$tcga$mrs))
plot(-log10(vobj_All_results$metabric$mrs[interect_All,"pvalue"]),
-log10(vobj_All_results$tcga$mrs[interect_All,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="All")
significant<- ( vobj_All_results$metabric$mrs[interect_All,"pvalue"] <0.15 | ( vobj_All_results$tcga$mrs[interect_All,"pvalue"] <0.15))
text(-log10(vobj_All_results$metabric$mrs[interect_All,][significant,"pvalue"]),
-log10(vobj_All_results$tcga$mrs[interect_All,][significant,"pvalue"])-0.1,
labels=interect_All[significant])
abline(v=-log10(0.05),lty=2)
abline(h=-log10(0.05),lty=2)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red",
labels=c("GATA3","PGR","FOXA1","ESR1"))
abline(v=-log10(0.05),lty=2)
abline(h=-log10(0.05),lty=2)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red",
labels=c("GATA3","PGR","FOXA1","ESR1"))
abline(v=-log10(0.05),lty=2)
abline(h=-log10(0.05),lty=2)
abline(v=-log10(0.1),lty=2)
abline(h=-log10(0.1),lty=2)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
point(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red")
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
points(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red",
labels=c("GATA3","PGR","FOXA1","ESR1"))
abline(v=-log10(0.05),lty=2)
abline(h=-log10(0.05),lty=2)
abline(v=-log10(0.1),lty=2)
abline(h=-log10(0.1),lty=2)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
points(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),pch=20,col="red")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red",
labels=c("GATA3","PGR","FOXA1","ESR1"))
abline(v=-log10(0.05),lty=2)
abline(h=-log10(0.05),lty=2)
abline(v=-log10(0.1),lty=2)
abline(h=-log10(0.1),lty=2)
interect_Dn<-intersect(rownames(vobj_Dn_results$metabric$mrs),
rownames(vobj_Dn_results$tcga$mrs))
plot(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"]),
pch=20, xlab="Metabric", ylab="TCGA",main="Down")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"])-0.1,
labels=interect_Dn)
points(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),pch=20,col="red")
text(-log10(vobj_Dn_results$metabric$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")]),
-log10(vobj_Dn_results$tcga$mrs[interect_Dn,"pvalue"][c("GATA3","PGR","FOXA1","ESR1")])-0.1,col="red",
labels=c("GATA3","PGR","FOXA1","ESR1"))
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
promoters(genes(txdb), upstream = 1500, downstream = 500)
p<-promoters(genes(txdb), upstream = 1500, downstream = 500)
p
p[,1:3]
as.data.frame(p)[,1:3]
write.bed<-function(p, filename){
write.table(as.data.frame(p)[,1:3]),
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.bed<-function(p, filename){
write.table(as.data.frame(p)[,1:3]),
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.bed<-function(p, filename){
write.table(as.data.frame(p)[,1:3]),
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.bed<-function(df, filename){
write.table(as.data.frame(df)[,1:3]),
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.bed<-function(df, filename){
write.table(as.data.frame(df)[,1:3],
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.beD(p,"bed/promoter.bed")
write.bed(p,"bed/promoter.bed")
setwd("/Users/holdin01/Dropbox (Cambridge University)/Work/CRUK/Manuscripts/Vulcan/grhl2")
write.bed(p,"bed/promoter.bed")
p<-promoters(genes(txdb), upstream = 1, downstream = 1)
genes(txdb)
p<-promoters(genes(txdb), upstream = 1, downstream = 1)
genes(txdb)
p<-promoters(genes(txdb), upstream = 1, downstream = 1)
p
write.table(as.data.frame(df)[,1:3],
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
write.bed(p,"bed/promoter.bed")
p<-promoters(genes(txdb), upstream = 1500, downstream = 500)
write.bed<-function(df, filename){
write.table(as.data.frame(df)[,1:3],
filename, quote=FALSE, sep="\t",
row.names=FALSE, col.names=FALSE)
}
write.bed(p,"bed/promoter.bed")
library(DiffBind)
setwd("/Users/holdin01/Dropbox (Cambridge University)/Work/CRUK/Manuscripts/Vulcan/grhl2")
if(!file.exists("rdata/003_diffbind.rda")) {
GRHL2 <- dba(sampleSheet="samplesheet/samplesheet.csv")
plot(GRHL2)
GRHL2 <- dba.count(GRHL2, summits=250)
GRHL2 <- dba.contrast(GRHL2)
GRHL2<- dba.analyze(GRHL2)
save(GRHL2,file="rdata/003_diffbind.rda")
} else {
load("rdata/003_diffbind.rda")
}
plot(GRHL2, contrast=1)
dba.plotVenn(GRHL2)
dba.plotVenn(GRHL2,mask=dba.mask(GRLH2,condition))
dba.plotVenn(GRHL2,mask=dba.mask(GRLH2,conditions))
dba.plotVenn(GRHL2,mask=dba.mask(GRHl2,conditions))
dba.plotVenn(GRHL2,mask=dba.mask(GRHL2,conditions))
?dba.mask
dba.plotVenn(GRHL2,mask=dba.mask(GRHL2,DBA_CONDITION))
dba.plotVenn(GRHL2,mask=DBA_CONDITION)
dba.mask(GRHL2,DBA_CONDITION)
dba.mask(GRHL2,DBA_CONDITION)
dba.mask(GRHL2,DBA_CONDITION,1)
dba.mask(GRHL2,DBA_CONDITION,2)
dba.mask(GRHL2,DBA_CONDITION,3)
dba.mask(GRHL2,DBA_CONDITION,c("1a"))
dba.mask(GRHL2,DBA_CONDITION,"1a")
dba.mask(GRHL2,DBA_CONDITION,"E2")
dba.mask(GRHL2,DBA_CONDITION,"ER")
dba.plotVenn(GRHL2,mask=dba.mask(GRHL2,DBA_CONDITION,"E2"))
dba.plotVenn(GRHL2,GRHL2$masks$ER, label1="Rep1", label2="Rep2", main="GRHL2 +E2")
dba.plotVenn(GRHL2,GRHL2$masks$All, label1="Rep1", label2="Rep2", main="GRHL2 +E2")
dba.plotVenn(GRHL2,GRHL2$masks$Consensus, label1="Rep1", label2="Rep2", main="GRHL2 +E2")
1?dba.plotVenn()
?dba.plotVenn
dba.report(GRHL2,th=1)
dba.report(GRHL2,th=1)$Fold > 0
dba.report(GRHL2,th=1)$Fold < 0
len(dba.report(GRHL2,th=1)$Fold < 0)
length(dba.report(GRHL2,th=1)$Fold < 0)
length(dba.report(GRHL2,th=1)$Fold > 0)
r<-dba.report(GRHL2,th=1)
r[r$Fold>0]
length(r[r$Fold>0])
length(r[r$Fold<0])
GRHL1$called
GRHL2$called
GRHL2$called[c(1,3)]
GRHL2$called[c(1,3),]
GRHL2$called[,c(1,3)]
GRHL2$called[,c(1:3)]
rowSum(GRHL2$called[,c(1:3)])
rowsum(GRHL2$called[,c(1:3)])
rowSums(GRHL2$called[,c(1:3)])
rowSums(GRHL2$called[,c(1:3)],)
rowSums(GRHL2$called[,c(4:6)])
called_none<-rowSums(GRHL2$called[,c(1:3)])
called_ERrowSums(GRHL2$called[,c(4:6)])
called_ER<-rowSums(GRHL2$called[,c(4:6)])
called_none[called_none>2]
called_none[called_none>1]
length(called_none[called_none>1])
length(called_none[called_none>0])
length(called_none[called_none>0])
length(called_ER[called_ER>0])
rbind(called_none,called_ER)
cbind(called_none,called_ER)
called_none*called_none
length(called_both[called_both>0])
called_both<-called_none*called_none
length(called_both[called_both>0])
called_none<-rowSums(GRHL2$called[,c(1:3)])
called_ER<-rowSums(GRHL2$called[,c(4:6)])
length(called_none[called_none>0])
called_both<-called_none*called_none
length(called_both[called_both>0])
called_none<-rowSums(GRHL2$called[,c(1:3)])
called_ER<-rowSums(GRHL2$called[,c(4:6)])
length(called_none[called_none>0])
called_none<-rowSums(GRHL2$called[,c(1:3)])
called_ER<-rowSums(GRHL2$called[,c(4:6)])
length(called_none[called_none>0])
length(called_ER[called_none>0])
called_both<-called_none*called_none
length(called_both[called_both>0])
png("plots/dba.png")
length(called_ER[called_none>0])
length(called_ER[called_ER>0])
called_none<-rowSums(GRHL2$called[,c(1:3)])
called_ER<-rowSums(GRHL2$called[,c(4:6)])
length(called_none[called_none>0])
length(called_ER[called_ER>0])
called_both<-called_none*called_none
length(called_both[called_both>0])
library(DiffBind)
setwd("/Users/holdin01/Dropbox (Cambridge University)/Work/CRUK/Manuscripts/Vulcan/grhl2")
if(!file.exists("rdata/003_diffbind.rda")) {
GRHL2 <- dba(sampleSheet="samplesheet/samplesheet.csv")
plot(GRHL2)
GRHL2 <- dba.count(GRHL2, summits=250)
GRHL2 <- dba.contrast(GRHL2)
GRHL2<- dba.analyze(GRHL2)
save(GRHL2,file="rdata/003_diffbind.rda")
} else {
load("rdata/003_diffbind.rda")
}
plot(GRHL2, contrast=1)
dba.plotMA(GRHL2, bFlip=1)
dba.report(GRHL2)
library(ChIPpeakAnno)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
rep=dba.report(GRHL2)
ucsc.hg38.knownGene <- genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
chip.anno <- annotatePeakInBatch(rep,
AnnotationData=ucsc.hg38.knownGene)
chip.anno <- addGeneIDs(annotatedPeak=chip.anno,
orgAnn="org.Hs.eg.db",
feature_id_type="entrez_id",
IDs2Add="symbol")
chip.anno
as.data.frame(chip.anno)
x<-as.data.frame(chip.anno)
View(x)
View(x)
system("mdkir txt")
system("md txt")
system("mkdir txt")
write.table(as.data.frame(chip.anno), x="txt/report.txt")
write.table(as.data.frame(chip.anno), filename="txt/report.txt")
write.table
?write.table
write.table(as.data.frame(chip.anno), file="txt/report.txt")
unlink('Manuscript_Figures_cache', recursive = TRUE)
